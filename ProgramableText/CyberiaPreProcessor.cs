using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProgramableText
{
    /// <summary>
    /// Supported Languages:
    /// Java
    /// C#
    /// SQL
    /// </summary>
    public class CyberiaPreProcessor
    {
        public String LanguageUsing { get; set; }

        public const String LANGUAGE_JAVA = "JAVA";
        public const String LANGUAGE_C_SHARP = "CSHARP";
        public const String LANGUAGE_SQL = "SQL";

        #region Directives

        public static List<String> DIRECTIVES = new List<String>();

        public const String BLOCK_START = "blockstart";
        public const String BLOCK_END = "blockend";

        public const String DEV_ONLY = "dev only";

        public const String PROD_ONLY = "prod only";

        static CyberiaPreProcessor()
        {
            DIRECTIVES.Add(DEV_ONLY);
            DIRECTIVES.Add(PROD_ONLY);
        }

        #endregion

        #region messages

        public string devMessage()
        {
            String devMessage = "This file was generated by the Cyberia Pre-Processor" + Environment.NewLine;
            devMessage += "Language of output file: " + LanguageUsing + Environment.NewLine;
            devMessage += "File Generated on: " + DateTime.Now + Environment.NewLine;

            return codeComment(devMessage);
        }

#endregion
        /// <summary>
        /// Processes input code (.cyberia files in the future)
        /// into devCode and prodCode
        /// </summary>
        /// <param name="input"></param>
        /// <param name="devCode"></param>
        /// <param name="prodCode"></param>
        public void processText(String input, out String devCode, out String prodCode)
        {
            devCode = "" + devMessage();
            prodCode = "" + devMessage();

            //line by line pre-processing
            String devByLines, prodByLines;
            lineByLinePreProcess(input, out devByLines, out prodByLines);

        }

        protected void lineByLinePreProcess(string input, out string devByLines, out string prodByLines)
        {
            devByLines = "";
            prodByLines = "";

            String[] lines = input.Split(new[] { "\r\n", "\r", "\n" },
                StringSplitOptions.None);

            foreach (String line in lines)
            {
                //find any pre-processor directives? do those
                List<String> directives = findDirectives(line);
                //DEV / Prod only
                if (directives.Count >= 1)
                {


                    if (directives.Contains(DEV_ONLY))
                    {
                        devByLines += line + Environment.NewLine;

                    }
                    else if (directives.Contains(DEV_ONLY))
                    {
                        prodByLines += line + Environment.NewLine;
                    }
                }
                else
                {
                    //No Processor directives found
                    devByLines += line + Environment.NewLine;
                    prodByLines += line + Environment.NewLine;
                }


            }

        }

        public List<string> findDirectives(string str)
        {
            List<String> directivesFound = new List<string>();
            foreach (String directive in DIRECTIVES)
            {
                if (findDirective(str,directive))
                {
                    directivesFound.Add(directive);
                }
            }

            return directivesFound;
        }

        public bool findDirective(string str, string directive)
        {
            if (str.ToLower().Contains(directive))
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public String codeComment(String strToComment)
        {
            return "/*" + Environment.NewLine + strToComment + Environment.NewLine + "*/" + Environment.NewLine;
        }
        public String codeCommentLine(String strToComment)
        {
            if (LanguageUsing.Equals(LANGUAGE_SQL))
            {
                //SQL support
                return "--" + strToComment;
            }
            else
            {
                //Java / C# support
                return "//" + strToComment;
            }
        }
    }
}
